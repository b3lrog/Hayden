// <auto-generated />
using System;
using Hayden.Consumers.HaydenMysql.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hayden.Consumers.HaydenMysql.DB.Migrations
{
    [DbContext(typeof(HaydenDbContext))]
    partial class HaydenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4", DelegationModes.ApplyToColumns);

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBBannedPoster", b =>
                {
                    b.Property<ushort>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<byte[]>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("PublicReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeBannedUTC")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("TimeUnbannedUTC")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("bans_user");
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBBoard", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("MultiImageLimit")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("ShowsDeletedPosts")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("boards");
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBFile", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("AdditionalMetadata")
                        .HasColumnType("json");

                    b.Property<ushort>("BoardId")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<bool>("FileBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FileExists")
                        .HasColumnType("tinyint(1)");

                    b.Property<ushort?>("ImageHeight")
                        .HasColumnType("smallint unsigned");

                    b.Property<ushort?>("ImageWidth")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte[]>("Md5Hash")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("binary(16)")
                        .IsFixedLength();

                    b.Property<byte[]>("PerceptualHash")
	                    .HasMaxLength(40)
                        .HasColumnType("binary(40)")
	                    .IsFixedLength();

                    b.Property<byte[]>("Sha1Hash")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("binary(20)")
                        .IsFixedLength();

                    b.Property<byte[]>("Sha256Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .IsFixedLength();

                    b.Property<uint>("Size")
                        .HasColumnType("int unsigned");

                    b.Property<byte[]>("StreamHash")
                        .HasMaxLength(16)
                        .HasColumnType("binary(16)")
                        .IsFixedLength();

                    b.Property<string>("ThumbnailExtension")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("Md5Hash");

                    b.HasIndex("PerceptualHash");

                    b.HasIndex("Sha1Hash");

                    b.HasIndex("StreamHash");

                    b.HasIndex("Sha256Hash", "BoardId")
	                    .IsUnique();

					b.ToTable("files");
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBFileMapping", b =>
                {
                    b.Property<ushort>("BoardId")
                        .HasColumnType("smallint unsigned");

                    b.Property<ulong>("PostId")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Index")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("AdditionalMetadata")
                        .HasColumnType("json");

                    b.Property<uint?>("FileId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSpoiler")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BoardId", "PostId", "Index");

                    b.HasIndex("FileId");

                    b.ToTable("file_mappings");
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBModerator", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("binary(64)")
                        .IsFixedLength();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .IsFixedLength();

                    b.Property<ModeratorRole>("Role")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("moderators");
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBPost", b =>
                {
                    b.Property<ushort>("BoardId")
                        .HasColumnType("smallint unsigned");

                    b.Property<ulong>("PostId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("AdditionalMetadata")
                        .HasColumnType("json");

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("longtext");

                    b.Property<string>("ContentRaw")
                        .HasColumnType("longtext");

                    b.Property<ContentType>("ContentType")
                        .IsRequired()
                        .HasColumnType("enum('Hayden','Yotsuba','Vichan','Meguca','InfinityNext','LynxChan','PonyChan','ASPNetChan')");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("PosterIP")
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)");

                    b.Property<ulong>("ThreadId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Tripcode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BoardId", "PostId");

                    b.HasIndex("BoardId", "ThreadId", "DateTime");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBThread", b =>
                {
                    b.Property<ushort>("BoardId")
                        .HasColumnType("smallint unsigned");

                    b.Property<ulong>("ThreadId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("AdditionalMetadata")
                        .HasColumnType("json");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BoardId", "ThreadId");

                    b.HasIndex("LastModified");

                    b.ToTable("threads");
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBFile", b =>
                {
                    b.HasOne("Hayden.Consumers.HaydenMysql.DB.DBBoard", null)
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBFileMapping", b =>
                {
                    b.HasOne("Hayden.Consumers.HaydenMysql.DB.DBBoard", null)
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hayden.Consumers.HaydenMysql.DB.DBFile", null)
                        .WithMany()
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBPost", b =>
                {
                    b.HasOne("Hayden.Consumers.HaydenMysql.DB.DBBoard", null)
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hayden.Consumers.HaydenMysql.DB.DBThread", b =>
                {
                    b.HasOne("Hayden.Consumers.HaydenMysql.DB.DBBoard", null)
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
